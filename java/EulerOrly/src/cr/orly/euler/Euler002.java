/*
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
*/
package cr.orly.euler;

import java.util.ArrayList;
import java.util.List;

public class Euler002
{

	public long fibo(int n)
	{
		if (n<=1)
		{
			return n;
		}
		else
		{
			return fibo(n-1) + fibo(n-2);
		}
	}
	
	public Long[] getFiboSequenceUpTo(int upperLimit)
	{
		List<Long> fibos = new ArrayList<>();
		//long[] fibos = new long[10];
		for(int i=0; ; i++)
		{
			long fibResult = fibo(i);
			if (fibResult > upperLimit)
			{
				return (Long[]) fibos.toArray(new Long[fibos.size()]);
			}
			fibos.add(fibResult);
		}
	}
	
	public long sumFibosUnder(int upperLimit)
	{
		long total = 0;
		Long[] fibos = getFiboSequenceUpTo(upperLimit);
		for(int i=0; i<fibos.length; i++)
		{
			long value = fibos[i];
			if (isEven(value))
			{
				System.out.print(value + " ");
				total+=value;
			}
		}
		return total;
	}
	
	public boolean isEven(long param)
	{
		long mod = (param % 2);
		return (mod == 0);
	}

	public long sumFibosUnder4Million()
	{
		int upperLimit = 4_000_000;
		long sum = sumFibosUnder(upperLimit);
		return sum;
	}
	
	public static void main(String... args)
	{
		Euler002 e = new Euler002();
		long sum = e.sumFibosUnder4Million();
		System.out.println();
		System.out.println("Sum of the even-valued terms in the Fibonacci sequence whose values do not exceed four million: " + sum);
	}

}
